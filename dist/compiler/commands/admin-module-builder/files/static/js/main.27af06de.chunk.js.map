{"version":3,"sources":["Table/Table.js","Form/Form.js","App/App.js","index.js"],"names":["Table","props","state","rows","formatters","onInputChange","name","index","newValue","reRender","newRow","head","key","formatter","options","Object","assign","this","defaultOptions","push","setState","unset","stateArrayKey","array","splice","value","inputName","type","onChange","e","target","required","includes","className","placeholder","formatOptions","map","format","defaultValue","tooltip","default","option","tableOptionColumn","formatterOption","onClick","removeRow","bind","icon","faTrash","id","renderRows","colSpan","addNewRow","faPlus","Component","Form","withStatus","addType","rowIndex","defaultInputValues","inputsTypes","color","Inputs","input","i","addDefaultRow","overrideBy","col","label","confirmName","itemKey","service","slug","multiLingual","imageable","lazyLoading","remoteSearch","none","booleanInput","manualPlaceHolderUpdate","manualValueUpdate","checked","inputIndex","inputOptions","nameCreator","replace","htmlFor","updateValue","checkboxInput","renderInputOptions","colsList","Array","v","text","readOnly","items","inputRendererType","renderTextInput","renderImageInput","renderEmailInput","renderNumberInput","renderDatepickerInput","renderCheckboxInput","renderDropdownInput","renderPasswordInput","removeInput","faTimes","call","row","renderInput","renderRow","settingsUrl","App","sent","apps","currentApp","axios","get","then","data","appsList","keys","baseApp","app","preventDefault","post","FormData","onSubmit","createModule","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.27af06de.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faTrash } from '@fortawesome/free-solid-svg-icons';\n\nexport default class Table extends Component {\n  state = {\n    rows: [],\n  };\n\n  formatters = [\n    '',\n    'email',\n    'image',\n    'link',\n    'imageLink',\n    'humanTime',\n    'status',\n    'boolean',\n    'number',\n    'translator',\n    'multiLingual',\n  ];\n\n  constructor(props) {\n    super(props);\n    this.newRow({\n      head: \"#\",\n      key: \"id\"\n    });\n\n    this.newRow({\n      head: \"name\",\n      key: \"name\",\n    });\n\n    this.newRow({\n      head: \"image\",\n      key: \"image\",\n      formatter: 'image',\n    });\n\n    this.newRow({\n      head: \"status\",\n      key: \"status\",\n      formatter: 'status',\n    });    \n  }\n\n  newRow(options) {\n    options = Object.assign(this.defaultOptions(), options);\n    this.state.rows.push(options);\n  }\n\n  addNewRow(options) {\n    this.state.rows.push(options);\n\n    this.setState(this.state);\n  }\n\n  removeRow(index) {\n    this.unset('rows', index);\n\n    this.reRender();\n  }\n\n  unset(stateArrayKey, index) {\n    let array = this.state[stateArrayKey];\n\n    this.setState({\n      [stateArrayKey]: array.splice(index, 1),\n    });\n  }\n\n  reRender() {\n    this.setState({\n      rows: [...this.state.rows],\n    });\n  }\n\n  onInputChange = (name, index, newValue) => {\n    let option = this.state.rows[index];\n    option[name] = newValue;\n\n    this.reRender();\n  }\n\n  tableOptionColumn(name, value, index) {\n    let inputName = `tableOptions[columns][${index}][${name}]`;\n\n    return <td>\n      <input type=\"text\"\n        onChange={e => { this.onInputChange(name, index, e.target.value) }}\n        required={!['tooltip', 'default'].includes(name)}\n        className=\"form-control\"\n        placeholder={name}\n        value={value}\n        name={inputName} />\n    </td>;\n  }\n\n  formatterOption(value, index) {\n    let formatOptions = this.formatters.map((format, index) => {\n      return <option key={index} value={format}>{format}</option>\n    });\n\n    let inputName = `tableOptions[columns][${index}][formatter]`;\n\n    return <td>\n      <select name={inputName} defaultValue={value} className=\"form-control\">\n        {formatOptions}\n      </select>\n    </td>;\n  }\n\n  defaultOptions() {\n    return {\n      head: '',\n      key: '',\n      formatter: '',\n      value: '',\n      tooltip: '',\n      default: '',\n    };\n  }\n\n  renderRows() {\n    return this.state.rows.map((option, index) => {\n      return <tr key={index}>\n        {this.tableOptionColumn('head', option.head, index)}\n        {this.tableOptionColumn('key', option.key, index)}\n        {this.formatterOption(option.formatter, index)}\n        {this.tableOptionColumn('default', option.default, index)}\n        {this.tableOptionColumn('tooltip', option.tooltip, index)}\n\n        <td>\n          <button type=\"button\" className=\"btn btn-sm btn-danger\" onClick={this.removeRow.bind(this, index)}>\n            <FontAwesomeIcon icon={faTrash} />\n          </button>\n        </td>\n      </tr>;\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Table Options</h2>\n        <table className=\"table table-bordered\" id=\"table-options-list\">\n          <thead>\n            <tr>\n              <th>Heading Column</th>\n              <th>Response Key</th>\n              <th>Response Value Formatter</th>\n              <th>Default Value</th>\n              <th>Tooltip</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.renderRows()}\n          </tbody>\n          <tfoot>\n            <tr>\n              <td colSpan=\"6\">\n                <button type=\"button\"\n                  onClick={this.addNewRow.bind(this, this.defaultOptions())}\n                  className=\"btn btn-sm btn-info\">\n                  <FontAwesomeIcon icon={faPlus} />\n                </button>\n              </td>\n            </tr>\n          </tfoot>\n        </table>\n      </div>\n    )\n  }\n}\n","import './form.scss';\nimport React, { Component } from 'react';\nimport { faPlus, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport default class Form extends Component {\n  state = {\n    rows: [],\n    withStatus: true,\n  };\n\n  addType = (rowIndex, type) => {\n    let row = this.state.rows[rowIndex];\n    row.push(this.defaultInputValues({ type }));\n\n    this.reRender();\n  };\n\n  defaultInputValues(overrideBy = {}) {\n    return Object.assign({\n      type: '',\n      col: 'col',\n      name: '',\n      value: '',\n      label: '',\n      placeholder: '',\n      confirmName: '',\n      itemKey: '',\n      service: '',\n      slug: false,\n      required: false,\n      multiLingual: false,\n      imageable: false,\n      lazyLoading: false,\n      remoteSearch: false,\n      none: false,\n    }, overrideBy);\n  }\n\n  inputsTypes = [\n    {\n      type: 'text',\n      color: 'purple',\n      onClick: this.addType,\n    },\n    {\n      type: 'textarea',\n      color: 'brown',\n      onClick: this.addType,\n    },\n    {\n      type: 'email',\n      color: 'orange',\n      onClick: this.addType,\n    },\n    {\n      type: 'image',\n      color: 'pink',\n      onClick: this.addType,\n    },\n    {\n      type: 'password',\n      color: 'teal',\n      onClick: this.addType,\n    },\n    {\n      type: 'number',\n      color: 'blue',\n      onClick: this.addType,\n    },\n    {\n      type: 'datepicker',\n      color: 'grey',\n      onClick: this.addType,\n    },\n    {\n      type: 'checkbox',\n      color: 'indigo',\n      onClick: this.addType,\n    },\n    {\n      type: 'dropdown',\n      color: 'lime',\n      onClick: this.addType,\n    },\n  ];\n\n  Inputs = (index) => {\n    return this.inputsTypes.map((input, i) => {\n      return <button\n        key={i}\n        type=\"button\"\n        className={'add-type-btn btn btn-sm btn-' + input.color}\n        onClick={input.onClick.bind(this, index, input.type)}\n      >\n        <FontAwesomeIcon icon={faPlus} className=\"mr-1\" />\n        {input.type} Input\n          </button>\n    });\n  };\n\n  constructor(props) {\n    super(props);\n    this.addDefaultRow();\n  }\n\n  addDefaultRow() {\n    this.state.rows.push([\n      this.defaultInputValues({\n        type: 'text',\n        name: 'name',\n        label: 'name',\n        placeholder: 'name',\n        value: 'name',\n        slug: false,\n        required: true,\n      }),\n    ]);\n\n    this.state.rows.push([\n      this.defaultInputValues({\n        type: 'image',\n        name: 'image',\n        label: 'image',\n        value: 'image',\n        required: true,\n      }),\n    ]);\n  }\n\n  reRender() {\n    this.setState({\n      rows: [...this.state.rows],\n    });\n  }\n  addNewRow() {\n    this.state.rows.push([]);\n\n    this.setState(this.state);\n  }\n\n  updateValue(input, key, e, booleanInput = false) {\n    if (booleanInput === false) {\n      input[key] = e.target.value;\n\n      if (key === 'label' && typeof input.placeholder !== 'undefined' && !input.manualPlaceHolderUpdate) {\n        input.placeholder = e.target.value;\n      }\n\n      if (key === 'placeholder') {\n        input.manualPlaceHolderUpdate = true;\n      }\n\n      if (key === 'name' && !input.manualValueUpdate) {\n        input.value = e.target.value;\n      }\n\n      if (key === 'value') {\n        input.manualValueUpdate = true;\n      }\n\n    } else {\n      input[key] = e.target.checked;\n    }\n\n    this.reRender();\n  }\n\n  removeInput(rowIndex, inputIndex) {\n    this.state.rows[rowIndex].splice(inputIndex, 1);\n    this.reRender();\n  }\n\n  removeRow(rowIndex) {\n    this.state.rows.splice(rowIndex, 1);\n    this.reRender();\n  }\n\n  checkboxInput(inputName, inputOptions, nameCreator, label = inputName) {\n    let name = nameCreator(inputName),\n      id = name.replace(/[[|]]*/g, '');\n    return <div className=\"form-group\">\n      <label htmlFor={id}>\n        {label} Input\n    </label>\n      <input type=\"checkbox\"\n        name={name}\n        id={id}\n        value={1}\n        checked={inputOptions[inputName]}\n        onChange={e => { this.updateValue(inputOptions, inputName, e, true) }}\n        className=\"ml-2\"\n      />\n    </div>\n  }\n\n  renderTextInput(inputOptions, nameCreator) {\n    return <>\n      <input type=\"text\"\n        name={nameCreator('name')}\n        placeholder=\"Name\"\n        value={inputOptions.name}\n        onChange={e => { this.updateValue(inputOptions, 'name', e) }}\n        className=\"form-control mb-2\"\n      />\n      <input type=\"text\"\n        name={nameCreator('value')}\n        placeholder=\"Value Key\"\n        value={inputOptions.value}\n        onChange={e => { this.updateValue(inputOptions, 'value', e) }}\n        className=\"form-control mb-2\"\n      />\n      <input type=\"text\"\n        name={nameCreator('label')}\n        placeholder=\"Label\"\n        value={inputOptions.label}\n        onChange={e => { this.updateValue(inputOptions, 'label', e) }}\n        className=\"form-control mb-2\"\n      />\n      <input type=\"text\"\n        name={nameCreator('placeholder')}\n        placeholder=\"placeholder\"\n        value={inputOptions.placeholder}\n        onChange={e => { this.updateValue(inputOptions, 'placeholder', e) }}\n        className=\"form-control mb-2\"\n      />\n\n      {this.checkboxInput('required', inputOptions, nameCreator)}\n      {this.checkboxInput('multiLingual', inputOptions, nameCreator)}\n      {inputOptions.type == 'text' && this.checkboxInput('slug', inputOptions, nameCreator)}\n\n      {this.renderInputOptions(nameCreator, inputOptions)}\n    </>;\n  }\n\n  renderImageInput(inputOptions, nameCreator) {\n    return <>\n      <input type=\"text\"\n        name={nameCreator('name')}\n        placeholder=\"Name\"\n        value={inputOptions.name}\n        onChange={e => { this.updateValue(inputOptions, 'name', e) }}\n        className=\"form-control mb-2\"\n      />\n\n      <input type=\"text\"\n        name={nameCreator('value')}\n        placeholder=\"Value Key\"\n        value={inputOptions.value}\n        onChange={e => { this.updateValue(inputOptions, 'value', e) }}\n        className=\"form-control mb-2\"\n      />\n\n      <input type=\"text\"\n        name={nameCreator('label')}\n        placeholder=\"Label\"\n        value={inputOptions.label}\n        onChange={e => { this.updateValue(inputOptions, 'label', e) }}\n        className=\"form-control mb-2\"\n      />\n\n      {this.checkboxInput('multiLingual', inputOptions, nameCreator)}\n      {this.checkboxInput('required', inputOptions, nameCreator)}\n\n      {this.renderInputOptions(nameCreator, inputOptions)}\n    </>;\n  }\n\n  renderNumberInput(inputOptions, nameCreator) {\n    return <>\n      <input type=\"text\"\n        name={nameCreator('name')}\n        placeholder=\"Name\"\n        value={inputOptions.name}\n        onChange={e => { this.updateValue(inputOptions, 'name', e) }}\n        className=\"form-control mb-2\"\n      />\n      <input type=\"text\"\n        name={nameCreator('value')}\n        placeholder=\"Value Key\"\n        value={inputOptions.value}\n        onChange={e => { this.updateValue(inputOptions, 'value', e) }}\n        className=\"form-control mb-2\"\n      />\n      <input type=\"text\"\n        name={nameCreator('label')}\n        placeholder=\"Label\"\n        value={inputOptions.label}\n        onChange={e => { this.updateValue(inputOptions, 'label', e) }}\n        className=\"form-control mb-2\"\n      />\n      <input type=\"text\"\n        name={nameCreator('placeholder')}\n        placeholder=\"placeholder\"\n        value={inputOptions.placeholder}\n        onChange={e => { this.updateValue(inputOptions, 'placeholder', e) }}\n        className=\"form-control mb-2\"\n      />\n\n      {this.checkboxInput('required', inputOptions, nameCreator)}\n\n      {this.renderInputOptions(nameCreator, inputOptions)}\n    </>;\n  }\n\n  renderInputOptions(nameCreator, inputOptions) {\n    let colsList = (new Array(...Array(13))).map((v, index) => {\n      let value, text;\n      if (index == 0) {\n        value = 'col';\n        text = 'Auto Fill';\n      } else {\n        text = `col-${index + 1}`;\n        value = `col-sm-${index + 1}`;\n      }\n\n      return <option key={index} value={value}>{text}</option>\n    });\n\n    return <>\n      <select className=\"form-control mb-2\" name={nameCreator('col')} onChange={e => { this.updateValue(inputOptions, 'col', e) }} value={inputOptions.col}>\n        {colsList}\n      </select>\n      <input type=\"text\"\n        name={nameCreator('type')}\n        placeholder={inputOptions.type + ' Type'}\n        value={inputOptions.type}\n        readOnly={true}\n        className=\"form-control mb-2\"\n      />\n    </>;\n  }\n\n  renderDatepickerInput(inputOptions, nameCreator) {\n    return <>\n      <input type=\"text\"\n        name={nameCreator('name')}\n        placeholder=\"Name\"\n        value={inputOptions.name}\n        onChange={e => { this.updateValue(inputOptions, 'name', e) }}\n        className=\"form-control mb-2\"\n      />\n      <input type=\"text\"\n        name={nameCreator('value')}\n        placeholder=\"Value Key\"\n        value={inputOptions.value}\n        onChange={e => { this.updateValue(inputOptions, 'value', e) }}\n        className=\"form-control mb-2\"\n      />\n      <input type=\"text\"\n        name={nameCreator('label')}\n        placeholder=\"Label\"\n        value={inputOptions.label}\n        onChange={e => { this.updateValue(inputOptions, 'label', e) }}\n        className=\"form-control mb-2\"\n      />\n      <input type=\"text\"\n        name={nameCreator('placeholder')}\n        placeholder=\"placeholder\"\n        value={inputOptions.placeholder}\n        onChange={e => { this.updateValue(inputOptions, 'placeholder', e) }}\n        className=\"form-control mb-2\"\n      />\n\n      {this.checkboxInput('required', inputOptions, nameCreator)}\n      {this.renderInputOptions(nameCreator, inputOptions)}\n    </>;\n  }\n\n  renderCheckboxInput(inputOptions, nameCreator) {\n    return <>\n      <input type=\"text\"\n        name={nameCreator('name')}\n        placeholder=\"Name\"\n        value={inputOptions.name}\n        onChange={e => { this.updateValue(inputOptions, 'name', e) }}\n        className=\"form-control mb-2\"\n      />\n      <input type=\"text\"\n        name={nameCreator('value')}\n        placeholder=\"Value Key\"\n        value={inputOptions.value}\n        onChange={e => { this.updateValue(inputOptions, 'value', e) }}\n        className=\"form-control mb-2\"\n      />\n      <input type=\"text\"\n        name={nameCreator('label')}\n        placeholder=\"Label\"\n        value={inputOptions.label}\n        onChange={e => { this.updateValue(inputOptions, 'label', e) }}\n        className=\"form-control mb-2\"\n      />\n\n      {this.checkboxInput('required', inputOptions, nameCreator)}\n      {this.renderInputOptions(nameCreator, inputOptions)}\n    </>;\n  }\n\n  renderEmailInput(inputOptions, nameCreator) {\n    return <>\n      <input type=\"text\"\n        name={nameCreator('name')}\n        placeholder=\"Name\"\n        value={inputOptions.name}\n        onChange={e => { this.updateValue(inputOptions, 'name', e) }}\n        className=\"form-control mb-2\"\n      />\n      <input type=\"text\"\n        name={nameCreator('value')}\n        placeholder=\"Value Key\"\n        value={inputOptions.value}\n        onChange={e => { this.updateValue(inputOptions, 'value', e) }}\n        className=\"form-control mb-2\"\n      />\n      <input type=\"text\"\n        name={nameCreator('label')}\n        placeholder=\"Label\"\n        value={inputOptions.label}\n        onChange={e => { this.updateValue(inputOptions, 'label', e) }}\n        className=\"form-control mb-2\"\n      />\n      <input type=\"text\"\n        name={nameCreator('placeholder')}\n        placeholder=\"placeholder\"\n        value={inputOptions.placeholder}\n        onChange={e => { this.updateValue(inputOptions, 'placeholder', e) }}\n        className=\"form-control mb-2\"\n      />\n\n      {this.checkboxInput('required', inputOptions, nameCreator)}\n      {this.renderInputOptions(nameCreator, inputOptions)}\n    </>;\n  }\n\n  renderPasswordInput(inputOptions, nameCreator) {\n    return <>\n      <input type=\"text\"\n        name={nameCreator('name')}\n        placeholder=\"Name\"\n        value={inputOptions.name}\n        onChange={e => { this.updateValue(inputOptions, 'name', e) }}\n        className=\"form-control mb-2\"\n      />\n      <input type=\"text\"\n        name={nameCreator('confirmName')}\n        placeholder=\"Confirm Password Name\"\n        value={inputOptions.name}\n        onChange={e => { this.updateValue(inputOptions, 'confirmName', e) }}\n        className=\"form-control mb-2\"\n      />\n      <input type=\"text\"\n        name={nameCreator('value')}\n        placeholder=\"Value Key\"\n        value={inputOptions.value}\n        onChange={e => { this.updateValue(inputOptions, 'value', e) }}\n        className=\"form-control mb-2\"\n      />\n      <input type=\"text\"\n        name={nameCreator('label')}\n        placeholder=\"Label\"\n        value={inputOptions.label}\n        onChange={e => { this.updateValue(inputOptions, 'label', e) }}\n        className=\"form-control mb-2\"\n      />\n      <input type=\"text\"\n        name={nameCreator('placeholder')}\n        placeholder=\"placeholder\"\n        value={inputOptions.placeholder}\n        onChange={e => { this.updateValue(inputOptions, 'placeholder', e) }}\n        className=\"form-control mb-2\"\n      />\n\n      {this.checkboxInput('required', inputOptions, nameCreator)}\n      {this.renderInputOptions(nameCreator, inputOptions)}\n    </>;\n  }\n\n  renderDropdownInput(inputOptions, nameCreator) {\n    return <>\n      <input type=\"text\"\n        name={nameCreator('name')}\n        placeholder=\"Name\"\n        value={inputOptions.name}\n        onChange={e => { this.updateValue(inputOptions, 'name', e) }}\n        className=\"form-control mb-2\"\n      />\n\n      <input type=\"text\"\n        name={nameCreator('value')}\n        placeholder=\"Value Key\"\n        value={inputOptions.value}\n        onChange={e => { this.updateValue(inputOptions, 'value', e) }}\n        className=\"form-control mb-2\"\n      />\n\n      <input type=\"text\"\n        name={nameCreator('label')}\n        placeholder=\"Label\"\n        value={inputOptions.label}\n        onChange={e => { this.updateValue(inputOptions, 'label', e) }}\n        className=\"form-control mb-2\"\n      />\n\n      <input type=\"text\"\n        name={nameCreator('placeholder')}\n        placeholder=\"Heading\"\n        value={inputOptions.placeholder}\n        onChange={e => { this.updateValue(inputOptions, 'placeholder', e) }}\n        className=\"form-control mb-2\"\n      />\n\n      {!inputOptions.lazyLoading && <>\n        <input type=\"text\"\n          name={nameCreator('items')}\n          placeholder=\"itemsKey (i.e `this.languages` or `['enabled', 'disabled']`), (Can not be used along with lazyLoading inputs)\"\n          value={inputOptions.items}\n          onChange={e => { this.updateValue(inputOptions, 'items', e) }}\n          className=\"form-control mb-2\"\n        />\n      </>}\n\n      {this.checkboxInput('required', inputOptions, nameCreator)}\n      {this.checkboxInput('imageable', inputOptions, nameCreator)}\n      {this.checkboxInput('none', inputOptions, nameCreator)}\n\n      {this.checkboxInput('lazyLoading', inputOptions, nameCreator)}\n\n      {inputOptions.lazyLoading && <>\n        <input type=\"text\"\n          name={nameCreator('service')}\n          placeholder=\"Service Name\"\n          value={inputOptions.service}\n          onChange={e => { this.updateValue(inputOptions, 'service', e) }}\n          className=\"form-control mb-2\"\n        />\n\n        {this.checkboxInput('remoteSearch', inputOptions, nameCreator)}\n\n      </>}\n\n      {this.renderInputOptions(nameCreator, inputOptions)}\n    </>;\n  }\n\n  renderInput(inputOptions, rowIndex, inputIndex) {\n    let name = type => `formOptions[rows][${rowIndex}][${inputIndex}][${type}]`;\n    let inputRendererType;\n\n    switch (inputOptions.type) {\n      case 'text':\n      case 'textarea':\n        inputRendererType = this.renderTextInput;\n        break;\n      case 'image':\n        inputRendererType = this.renderImageInput;\n        break;\n\n      case 'email':\n        inputRendererType = this.renderEmailInput;\n        break;\n\n      case 'number':\n        inputRendererType = this.renderNumberInput;\n        break;\n\n      case 'datepicker':\n        inputRendererType = this.renderDatepickerInput;\n        break;\n\n      case 'checkbox':\n        inputRendererType = this.renderCheckboxInput;\n        break;\n\n      case 'dropdown':\n        inputRendererType = this.renderDropdownInput;\n        break;\n\n      case 'password':\n        inputRendererType = this.renderPasswordInput;\n        break;\n\n      default:\n        break;\n    }\n\n    return <>\n      <button type=\"button\" className=\"btn btn-sm btn-danger btn-circle \" onClick={this.removeInput.bind(this, rowIndex, inputIndex)}>\n        <FontAwesomeIcon icon={faTimes} />\n      </button>\n      {inputRendererType.call(this, inputOptions, name)}\n    </>;\n  }\n\n  renderRow(row, index) {\n    return row.map((input, i) => {\n      return <div key={i} className={input.col}>\n        {this.renderInput.call(this, input, index, i)}\n      </div>\n    });\n  }\n\n  renderRows() {\n    return this.state.rows.map((row, index) => {\n      return <div className=\"row form-row\" key={index}>\n        <div className=\"col-12 text-right\">\n          <button type=\"button\" className=\"btn btn-sm btn-danger btn-circle \" onClick={this.removeRow.bind(this, index)}>\n            <FontAwesomeIcon icon={faTimes} />\n          </button>\n        </div>\n        {this.renderRow(row, index)}\n        <div className=\"col-12\">\n          {this.Inputs(index)}\n        </div>\n      </div>\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Form Options</h2>\n        {this.renderRows()}\n\n        <button\n          type=\"button\"\n          className={'add-row-btn btn btn-sm btn-info'}\n          onClick={this.addNewRow.bind(this)}\n        >\n          <FontAwesomeIcon icon={faPlus} className=\"mr-1\" />\n          Row\n          </button>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"status\">Add Status Dropdown</label>\n          <input type=\"checkbox\" id=\"status\" className=\"ml-2\" name=\"formOptions[withStatus]\" checked={this.state.withStatus} onChange={e => this.setState({withStatus: e.checked})} value=\"1\" />\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport './App.scss';\nimport Table from '../Table/Table'\nimport Form from '../Form/Form'\nimport axios from 'axios';\n\nconst url = 'http://localhost:8881/create-module';\nconst settingsUrl = 'http://localhost:8881/settings';\n\nexport default class App extends Component {\n  state = {\n    sent: false,\n    apps: [],\n    currentApp: '',\n  };\n\n  constructor(props) {\n    super(props);\n\n    axios.get(settingsUrl).then(({data}) => {\n      let {apps} = data;\n\n      let appsList = Object.keys(apps);\n\n      if (! appsList.includes('common')) {\n        appsList.push('common');\n      }\n\n      this.setState({\n        apps: appsList,\n        currentApp: data.baseApp,\n      });\n    });\n  }\n\n  appsList() {\n    return this.state.apps.map(app => {\n      return (\n      <option value={app} key={app}>{app}</option>\n      );\n    });\n  }\n\n  createModule(e) {\n    e.preventDefault();\n    axios.post(url, new FormData(e.target));\n\n    this.setState({\n      sent: true,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        {this.state.sent && <>\n          <h1 className=\"font-weight-bold text-center green-text\">Admin Module Has Been Created Successfully</h1>\n        </>}\n        {!this.state.sent &&\n          <form onSubmit={this.createModule.bind(this)}>\n            <h1 className=\"text-center\">Admin Module Builder</h1>\n            <div className=\"row\">\n              <div className=\"col\">\n                <div className=\"form-group\">\n                  <label htmlFor=\"module\">Module</label>\n                  <input type=\"text\" required name=\"module\" placeholder=\"Module\" className=\"form-control\" />\n                </div>\n              </div>\n              <div className=\"col\">\n                <div className=\"form-group\">\n                  <label htmlFor=\"route\">Route</label>\n                  <input type=\"text\" required name=\"route\" placeholder=\"Route\" className=\"form-control\" />\n                </div>\n              </div>\n              <div className=\"col\">\n                <div className=\"form-group\">\n                  <label htmlFor=\"app\">Application</label>\n                  <select name=\"app\" onChange={e => this.setState({currentApp: e.target.value})} value={this.state.currentApp} className=\"form-control\">\n                    {this.appsList()}\n                  </select>\n                </div>\n              </div>\n            </div>\n            <Table />\n            <Form />\n            <button className=\"btn btn-success font-weight-bold\">Create</button>\n          </form>}\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App/App';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}